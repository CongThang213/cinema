"use client";

import { useState, useEffect, useCallback } from "react";
import { getShowtimes, deleteShowtime } from "@/services/api";
import ShowtimeForm from "./ShowtimeForm";
import { Showtime } from "@/types/types";

export default function ShowtimesAdmin() {
  const [showtimes, setShowtimes] = useState<Showtime[]>([]);
  const [editingShowtime, setEditingShowtime] = useState<Showtime | null>(null);
  const [loading, setLoading] = useState(true);

  // üîÑ Fetch danh s√°ch su·∫•t chi·∫øu
  const fetchShowtimes = useCallback(async () => {
    setLoading(true);
    try {
      const res = await getShowtimes();
      if (res?.data) {
        setShowtimes(
          res.data.map((s: any) => ({
            id: s.id,
            startTime: new Date(s.startTime), // Chuy·ªÉn string ‚Üí Date ngay t·ª´ ƒë·∫ßu
          }))
        );
      }
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y l·ªãch chi·∫øu:", error);
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch chi·∫øu!");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchShowtimes();
  }, [fetchShowtimes]);

  // üóë X√≥a su·∫•t chi·∫øu
  const handleDelete = async (id: number) => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch chi·∫øu n√†y?")) return;
    try {
      await deleteShowtime(id);
      setShowtimes((prev) => prev.filter((s) => s.id !== id));
      alert("‚úÖ X√≥a l·ªãch chi·∫øu th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a l·ªãch chi·∫øu:", error);
      alert("L·ªói khi x√≥a l·ªãch chi·∫øu! Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div>
      <ShowtimeForm
        editingShowtime={editingShowtime}
        onShowtimeSaved={(newShowtime) => {
          setShowtimes((prev) =>
            prev.some((s) => s.id === newShowtime.id)
              ? prev.map((s) =>
                  s.id === newShowtime.id ? { ...newShowtime } : s
                )
              : [...prev, newShowtime]
          );
          setEditingShowtime(null);
        }}
      />

      {loading ? (
        <p className="text-center mt-4">ƒêang t·∫£i danh s√°ch l·ªãch chi·∫øu...</p>
      ) : (
        <table className="table-auto w-full mt-4 border-collapse border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="p-2 border">ID</th>
              <th className="p-2 border">Th·ªùi gian</th>
              <th className="p-2 border">Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {showtimes.map((showtime) => (
              <tr key={showtime.id} className="border">
                <td className="p-2 border">{showtime.id}</td>
                <td className="p-2 border">
                  {showtime.startTime.toLocaleString()} {/* Hi·ªÉn th·ªã ƒë√∫ng format */}
                </td>
                <td className="p-2 border flex gap-2">
                  <button
                    onClick={() => setEditingShowtime(showtime)}
                    className="bg-blue-500 text-white px-2 py-1 rounded"
                  >
                    S·ª≠a
                  </button>
                  <button
                    onClick={() => handleDelete(showtime.id)}
                    className="bg-red-500 text-white px-2 py-1 rounded"
                  >
                    X√≥a
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
